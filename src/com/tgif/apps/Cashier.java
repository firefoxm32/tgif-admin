/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.tgif.apps;

import com.tgif.dao.CashierDao;
import com.tgif.model.Table;
import com.tgif.util.Task;
import com.tgif.util.TaskRunner;
import com.tgif.view.FormTransactionDetail;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Mon
 */
public class Cashier extends javax.swing.JFrame {

    public static Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
    private JLabel[] jLabeltableNum;
    private JPanel[] jPaneltables;
    private JLabel[] jLabelstatus;
    private int i;
    private int x;

    /**
     * Creates new form Kitchen
     */
    public Cashier() {
        initComponents();
        setExtendedState(MAXIMIZED_BOTH);
        gridLayout();
//        threading();
    }

    private void threading() {
        TaskRunner taskRunner = new TaskRunner();
        taskRunner.setTask(new Cashier.CashierTask());
        taskRunner.setDelay(10000);
        taskRunner.run();
    }

    private List<Table> a() {
        CashierDao cashierDao = new CashierDao();
        List<Table> tablesList = cashierDao.getTableStatus();

//        jLabeltableNum = new JLabel[tablesList.size()];
//        jLabelstatus = new JLabel[tablesList.size()];
        return tablesList;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 407, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 270, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getAccessibleContext().setAccessibleParent(this);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void gridLayout() {
        int tableCount = a().size();

        jPaneltables = new JPanel[tableCount];
        GridLayout gLayout = new GridLayout();
        gLayout.setHgap(5);
        gLayout.setVgap(5);

        if (tableCount == 1) {
            gLayout.setRows(0);
            gLayout.setColumns(1);
        } else if (tableCount
                < 11) {
            if ((tableCount % 2) == 0) {
                gLayout.setRows(2);
                gLayout.setColumns(3);
            } else if ((tableCount % 1) == 0) {
                gLayout = new GridLayout(3, 3);
                gLayout.setHgap(5);
                gLayout.setVgap(5);
                jPanel1.setLayout(gLayout);
            }
        } else if (tableCount
                > 10) {
            if ((tableCount % 2) == 0) {
                gLayout = new GridLayout(4, 4);
                gLayout.setHgap(5);
                gLayout.setVgap(5);
                jPanel1.setLayout(gLayout);

            } else if ((tableCount % 1) == 0) {
                gLayout = new GridLayout(5, 5);
                gLayout.setHgap(5);
                gLayout.setVgap(5);
                jPanel1.setLayout(gLayout);

            }
        } else {
            System.out.println("error");
            JOptionPane.showMessageDialog(null, "Error");
            return;
        }
        jPanel1.setLayout(gLayout);
        for (i = 0; i < tableCount; i++) {
            jPaneltables[i] = new JPanel();
            jPaneltables[i].setLayout(new BoxLayout(jPaneltables[i], BoxLayout.Y_AXIS));
            jPanel1.add(jPaneltables[i]);
        }
        jPanel1.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));

        threading();

        for (x = 0; x < tableCount; x++) {

            jPaneltables[x].addMouseListener(new MouseAdapter() {
                private int myIndex;
                private int tableNumber;
                // inner class

                {
                    this.myIndex = x;
                }

                @Override
                public void mouseClicked(MouseEvent me) {
                    super.mouseClicked(me); //To change body of generated methods, choose Tools | Templates.
//                    JOptionPane.showMessageDialog(null, tables[myIndex].getName());
                    System.out.println("index: " + myIndex);
//                    System.out.println("tableNum_size: " + tableNumberList.size());
                    System.out.println("tableNum: " + a().get(myIndex).getTableNumber());
                    if (jLabelstatus[myIndex].getText().equalsIgnoreCase("Waiting") || jLabelstatus[myIndex].getText().equalsIgnoreCase("Occupied")) {
                        JOptionPane.showMessageDialog(null, "Not Occupied");
                    } else {
                        callForm(a().get(myIndex).getTableNumber());
                    }
                }
            });
        }

        pack();
    }

    private class CashierTask implements Task {

        @Override
        public void queTask() {
            setTableBackground(a());
        }
    }

    private void setTableBackground(List<Table> status) {
        System.out.println("here");
        System.out.println("size: " + status.size());
        jLabeltableNum = new JLabel[status.size()];
        jLabelstatus = new JLabel[status.size()];
        for (x = 0; x < status.size(); x++) {
            jLabelstatus[x] = new JLabel();

            if (status.get(x).getStatus().equalsIgnoreCase("O")) {
                jPaneltables[x].setBackground(Color.green);
                jLabelstatus[x].setText("Occupied");
            } else if (status.get(x).getStatus().equalsIgnoreCase("C")) {
                jPaneltables[x].setBackground(Color.red);
                jLabelstatus[x].setText("Check Out");
            } else {
                jPaneltables[x].setBackground(Color.gray);
                jLabelstatus[x].setText("Waiting");
            }

            jLabeltableNum[x] = new JLabel();
            jLabeltableNum[x].setFont(new Font("Tahoma", Font.PLAIN, 24));
            jLabeltableNum[x].setText("#" + status.get(x).getTableNumber());
            jLabeltableNum[x].setAlignmentX(Component.CENTER_ALIGNMENT);


            jLabelstatus[x].setFont(new Font("Tahoma", Font.PLAIN, 24));

            jLabelstatus[x].setAlignmentX(Component.CENTER_ALIGNMENT);
            jPaneltables[x].add(jLabeltableNum[x]);
            jPaneltables[x].add(Box.createRigidArea(new Dimension(0, 30)));
            jPaneltables[x].add(jLabelstatus[x]);
        }
    }

    private void callForm(int tableNumber) {
        FormTransactionDetail form = new FormTransactionDetail(this, true, tableNumber);
        form.setLocationRelativeTo(null);
        form.setVisible(true);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;


                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cashier.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cashier.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cashier.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cashier.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Cashier().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
